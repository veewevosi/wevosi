ProgrammingError
sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedTable) relation "notification" does not exist
LINE 2: FROM notification 
             ^

[SQL: SELECT notification.id AS notification_id, notification.user_id AS notification_user_id, notification.title AS notification_title, notification.message AS notification_message, notification.read AS notification_read, notification.created_at AS notification_created_at 
FROM notification 
WHERE notification.user_id = %(user_id_1)s ORDER BY notification.created_at DESC]
[parameters: {'user_id_1': 3}]
(Background on this error at: https://sqlalche.me/e/20/f405)

Traceback (most recent call last)
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1969, in _exec_single_context
self.dialect.do_execute(
^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py", line 922, in do_execute
cursor.execute(statement, parameters)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The above exception was the direct cause of the following exception:
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 1478, in __call__
return self.wsgi_app(environ, start_response)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 1458, in wsgi_app
response = self.handle_exception(e)
           ^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 1455, in wsgi_app
response = self.full_dispatch_request()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 869, in full_dispatch_request
rv = self.handle_user_exception(e)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 867, in full_dispatch_request
rv = self.dispatch_request()
     ^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 852, in dispatch_request
return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/flask_login/utils.py", line 290, in decorated_view
return current_app.ensure_sync(func)(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/app.py", line 196, in notifications
.all()
 ^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py", line 2693, in all
return self._iter().all()  # type: ignore
       ^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py", line 2847, in _iter
result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                              
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py", line 2308, in execute
return self._execute_internal(
       
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py", line 2190, in _execute_internal
result: Result[Any] = compile_state_cls.orm_execute_statement(
                      
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py", line 293, in orm_execute_statement
result = conn.execute(
         
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
return meth(
       
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py", line 516, in _execute_on_connection
return connection._execute_clauseelement(
       
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1639, in _execute_clauseelement
ret = self._execute_context(
      
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1848, in _execute_context
return self._exec_single_context(
       
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1988, in _exec_single_context
self._handle_dbapi_exception(
^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 2343, in _handle_dbapi_exception
raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1969, in _exec_single_context
self.dialect.do_execute(
^
File "/home/runner/DarkFlatAuth/.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py", line 922, in do_execute
cursor.execute(statement, parameters)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedTable) relation "notification" does not exist
LINE 2: FROM notification
^

[SQL: SELECT notification.id AS notification_id, notification.user_id AS notification_user_id, notification.title AS notification_title, notification.message AS notification_message, notification.read AS notification_read, notification.created_at AS notification_created_at
FROM notification
WHERE notification.user_id = %(user_id_1)s ORDER BY notification.created_at DESC]
[parameters: {'user_id_1': 3}]
(Background on this error at: https://sqlalche.me/e/20/f405)
The debugger caught an exception in your WSGI application. You can now look at the traceback which led to the error.
To switch between the interactive traceback and the plaintext one, you can click on the "Traceback" headline. From the text traceback you can also create a paste of it. For code execution mouse-over the frame you want to debug and click on the console icon on the right side.

You can execute arbitrary Python code in the stack frames and there are some extra helpers available for introspection:

dump() shows all variables in the frame
dump(obj) dumps all that's known about the object
